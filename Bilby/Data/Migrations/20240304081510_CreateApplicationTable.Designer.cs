// <auto-generated />
using System;
using Bilby.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bilby.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240304081510_CreateApplicationTable")]
    partial class CreateApplicationTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bilby.Data.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActorUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actor_url");

                    b.Property<string>("FollowersUrl")
                        .HasColumnType("text")
                        .HasColumnName("followers_url");

                    b.Property<string>("FollowingUrl")
                        .HasColumnType("text")
                        .HasColumnName("following_url");

                    b.Property<string>("InboxUrl")
                        .HasColumnType("text")
                        .HasColumnName("inbox_url");

                    b.Property<string>("OutboxUrl")
                        .HasColumnType("text")
                        .HasColumnName("outbox_url");

                    b.Property<string>("PublicKeyPem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("public_key_pem");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("ActorUrl")
                        .IsUnique()
                        .HasDatabaseName("ix_accounts_actor_url");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("Bilby.Data.Application", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_name");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_secret");

                    b.Property<string[]>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("scopes");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_applications");

                    b.ToTable("applications", (string)null);
                });

            modelBuilder.Entity("Bilby.Data.Follower", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<string>("FollowId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("follow_id");

                    b.HasKey("Id")
                        .HasName("pk_followers");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_followers_account_id");

                    b.ToTable("followers", (string)null);
                });

            modelBuilder.Entity("Bilby.Data.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_at");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("Bilby.Data.PostMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alt")
                        .HasColumnType("text")
                        .HasColumnName("alt");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_post_media");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_post_media_post_id");

                    b.ToTable("post_media", (string)null);
                });

            modelBuilder.Entity("Bilby.Data.StoredSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_stored_settings");

                    b.ToTable("stored_settings", (string)null);
                });

            modelBuilder.Entity("Bilby.Data.Follower", b =>
                {
                    b.HasOne("Bilby.Data.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_followers_accounts_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Bilby.Data.PostMedia", b =>
                {
                    b.HasOne("Bilby.Data.Post", "Post")
                        .WithMany("Media")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_media_posts_post_id");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Bilby.Data.Post", b =>
                {
                    b.Navigation("Media");
                });
#pragma warning restore 612, 618
        }
    }
}
